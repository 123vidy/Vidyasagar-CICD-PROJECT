name: CI/CD Docker â†’ EC2

on:
  push:
    branches: [ main ]

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/1st-project:latest
          file: ./Dockerfile
          platforms: linux/amd64

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Setup SSH key
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "$EC2_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          IMAGE: vidyasagar084/1st-project:latest
          HOST_PORT: ${{ secrets.HOST_PORT }}
          CONTAINER_PORT: ${{ secrets.CONTAINER_PORT }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} <<'EOF'
            set -e
            IMAGE=vidyasagar084/1st-project:latest
            CONTAINER_NAME="demo-app"
            HOST_PORT=${HOST_PORT:-80}
            CONTAINER_PORT=${CONTAINER_PORT:-3000}

            # install docker if missing
            if ! command -v docker >/dev/null 2>&1; then
              if [ -f /etc/os-release ] && grep -qi "amazon linux" /etc/os-release; then
                sudo yum update -y
                sudo amazon-linux-extras install docker -y
              else
                sudo apt-get update -y
                sudo apt-get install -y docker.io
              fi
              sudo systemctl enable --now docker
            fi

            # pull latest image and run
            sudo docker pull ${IMAGE}
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}$"; then
              sudo docker stop ${CONTAINER_NAME} || true
              sudo docker rm ${CONTAINER_NAME} || true
            fi
            sudo docker run -d --name ${CONTAINER_NAME} -p ${HOST_PORT}:${CONTAINER_PORT} --restart unless-stopped ${IMAGE}
          EOF
